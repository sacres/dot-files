# shellcheck disable=1090,1091,2034
#######################################################################
#                           Vagrant, virt*                            #
#######################################################################
# Assumes DATA mount exists. This needs some luv; as does the libvirt vars.
# export VAGRANT_VAGRANTFILE=Vagrantfile.local
# export VAGRANT_DEFAULT_PROVIDER=libvirt
export VAGRANT_HOME=/run/media/$USER/DATA/.vagrant.d

# Disable '..appears unused..' warning within this file (as the warns here aren't applicable: some vars shouldn't be GLOBAL)
#######################################################################
#           GH Token (Handled elsewhere) w/ enc.		      #
#######################################################################

#######################################################################
#                             Android SDK                             #
#######################################################################
if [ -d /opt/Android ]; then
  PATH=$PATH:/opt/Android/Sdk/platform-tools
fi

#######################################################################
#                            Atlassian SDK                            #
#######################################################################
if [ -d /opt/atlassian-plugin-sdk ]; then
  PATH=$PATH:$(find /opt/atlassian-plugin-sdk -type d -iname 'bin' -printf ":%p")
fi

#######################################################################
#                             Travis CLI                              #
#######################################################################
if [ -d ~/.travis ]; then
  . ~/.travis/travis.sh
fi

#######################################################################
#                                 GPG                                 #
#######################################################################
alias gpg=gpg2
GPG_TTY="$(tty)"
export GPG_TTY
#######################################################################
#                                RUBY                                 #
#######################################################################
if [ -d ~/.rbenv ]; then
  PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

#######################################################################
#                                 Go                                  #
#######################################################################
if [[ "$(type -p go)" ]]; then
  GOPATH="$HOME/go-work"
  PATH=$PATH:$GOPATH/bin
  export GOPATH
fi

#######################################################################
#                              Git Stuff                              #
#######################################################################
if [ -f ~/.gitconfig ]; then
   GIT_COMMITTER_NAME="$(getent passwd "$USER" | cut -d ':' -f 5)"
   GIT_COMMITTER_EMAIL="$( git config --get user.email)"
   GIT_AUTHOR_NAME="$(getent passwd "$USER" | cut -d ':' -f 5)"
   GIT_AUTHOR_EMAIL="$(git config --get user.email)"
   GITHUB_USER="$(git config --get user.name)"
   export GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GITHUB_USER
fi

if [[ "$(type -p hub)" ]]; then
  . "$HOME/bin/hub.bash_completion.sh"
  # eval "$(hub alias -s)"
  if [ ! -f "$HOME"/.config/hub ]; then
    gpg2 --quiet --batch --use-agent --decrypt "$HOME"/creds/hub.gpg > "$HOME"/.config/hub
  fi
fi

#######################################################################
#                           Token Affection                           #
#######################################################################
function with_github () {
  if [[ "$(type -p pass)" && "$(id -u)" != 0 ]]; then
    /usr/bin/pass github/token
  fi
}

if [[ "$(with_github)" ]]; then
  GITHUB_TOKEN=$(with_github)
  GITHUB_ACCESS_TOKEN=$(with_github)
  export GITHUB_TOKEN GITHUB_ACCESS_TOKEN
fi
#######################################################################
#                              Node o_0                               #
#######################################################################
if [[ "$(type -p node)" ]]; then
  node_path=$(npm config get prefix)
  PATH="$node_path/bin:$PATH"
fi

#######################################################################
#                               Haskell                               #
#######################################################################
if [[ "$(type -p stack)" ]]; then
  eval "$(stack --bash-completion-script stack)"
fi

#######################################################################
#                               Home(y)                               #
#######################################################################
if [[ -d "$HOME"/.local/bin ]]; then
  PATH="$PATH:$HOME/.local/bin"
fi

#######################################################################
#                              Powerline                              #
#######################################################################
if [[ "$(type -p powerline-daemon)" ]]; then
  powerline-daemon -q
  POWERLINE_BASH_CONTINUATION=1
  POWERLINE_BASH_SELECT=1
  . /usr/share/powerline/bash/powerline.sh
fi

#######################################################################
#                               Python                                #
#######################################################################
# virtualenv mgmt via: https://github.com/yyuu/pyenv
if [ -d ~/.pyenv ]; then
  PYENV_ROOT="$HOME/.pyenv"
  PATH="$PYENV_ROOT/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
  PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV=true
  # Python Encoding
  PYTHONIOENCODING=utf_8
  export PYENV_ROOT PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV PYTHONIOENCODING
fi

#######################################################################
#                     Call in the Cleaner (PATH)                      #
#######################################################################
if [ -f "$HOME/.bashrc.pathclean" ]; then
  . "$HOME/.bashrc.pathclean"
fi
